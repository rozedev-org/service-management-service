// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  userName    String        @unique @map("user_name")
  firstName   String        @map("first_name")
  lastName    String        @map("last_name")
  password    String        @default("")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  requirement Requirement[]
  isEnabled   Boolean       @default(true) @map("is_enabled")
  loginTries  Int           @default(0) @map("login_tries")
  profileId   Int           @map("profile_id")
  profile     Profile       @relation(fields: [profileId], references: [id])
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String   @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Requirement {
  id                    Int                     @id @default(autoincrement())
  user                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?                    @map("user_id")
  state                 RequirementState        @relation(fields: [stateId], references: [id])
  stateId               Int                     @map("state_id")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  requirementType       RequirementType         @relation(fields: [requirementTypeId], references: [id])
  requirementTypeId     Int                     @map("requirement_type_id")
  requirementFieldValue RequirementFieldValue[]
}

model RequirementState {
  id          Int           @id @default(autoincrement())
  title       String
  secuence    Int
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  requirement Requirement[]
}

model RequirementType {
  id                   Int                    @id @default(autoincrement())
  name                 String
  requirementTypeField RequirementTypeField[]
  Requirement          Requirement[]
}

model RequirementTypeField {
  id                    Int                     @id @default(autoincrement())
  title                 String
  type                  String
  order                 Int                     @default(0)
  options               Json?                   @default("[]")
  requirementType       RequirementType         @relation(fields: [requirementTypeId], references: [id], onDelete: Cascade)
  requirementTypeId     Int                     @map("requirement_type_id")
  RequirementFieldValue RequirementFieldValue[]
  isOptional            Boolean                 @default(true) @map("is_optional")
  isRequired            Boolean                 @default(false) @map("is_required")
}

model RequirementFieldValue {
  id                     Int                  @id @default(autoincrement())
  value                  String
  requirementTypeField   RequirementTypeField @relation(fields: [requirementTypeFieldId], references: [id], onDelete: Cascade)
  requirementTypeFieldId Int                  @map("requirement_field_id")
  requirement            Requirement          @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  requirementId          Int                  @map("requirement_id")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cities    City[]
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  stateId   Int      @map("state_id")
  state     State    @relation(fields: [stateId], references: [id])
  towns     Town[]
}

model Town {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cityId    Int      @map("city_id")
  city      City     @relation(fields: [cityId], references: [id])
  offices   Office[]
}

model Office {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  townId    Int      @map("town_id")
  town      Town     @relation(fields: [townId], references: [id])
}
